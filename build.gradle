plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

springBoot {
	mainClass = 'com.example.springbootquickstartstudy.SpringbootQuickstartStudyApplication'
}

java {
	toolchain {
		// Java 21 버전으로 컴파일 설정
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	// 라이브러리 의존성 관리를 위한 중앙 저장소
	mavenCentral()
}

dependencies {
	// ========================
	// 웹 애플리케이션
	// ========================
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// ========================
	// JSP 렌더링 관련
	// ========================
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
	runtimeOnly 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'

	// ========================
	// JPA
	// ========================
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// ========================
	// QueryDSL
	// ========================
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// ========================
	// 데이터베이스 (H2)
	// ========================
	implementation 'com.h2database:h2'

	// ========================
	// Lombok
	// ========================
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// ========================
	// 개발 편의 도구
	// ========================
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// ========================
	// 테스트 도구
	// ========================
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// QueryDSL로 생성되는 Q타입 클래스의 출력 경로를 정의
def querydslGeneratedMain = layout.buildDirectory.dir("generated/querydsl/main").get().asFile

sourceSets {
	main {
		java {
			// 생성된 Q클래스를 Java 소스 경로에 포함시킴
			srcDirs += querydslGeneratedMain
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	// Q타입 클래스가 생성될 경로 지정
	if (name.contains("main")) {
		options.generatedSourceOutputDirectory = querydslGeneratedMain
	}
}

tasks.named('test') {
	// JUnit 5 기반 테스트 실행 설정
	useJUnitPlatform()
}
